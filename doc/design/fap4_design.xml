<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Discrete Events Dynamics System (DEDS) native framework. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 23-Aug-2022</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for DEDS native framework.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>23-Aug-2022</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist>
	<title>References</title>

	<biblioentry id="ref_incr_mut"> <abbrev>INCR_MUT</abbrev>
	    <productname><ulink url="../../../fap-doc/doc_incr_syst_creation/index.html "/></productname>
	    <title>Y.Borisov. Using incremental mutation process for systems modeling</title> </biblioentry>
    </bibliolist>

    <glossary> <title>Glossary</title> 

	<glossentry id="gls_cp"><glossterm>CP</glossterm> <acronym>CP</acronym>
	    <glossdef> <para>Connection Point. Element that is used as endpoint of connections between systems. </para></glossdef>
	</glossentry>

	<glossentry id="gls_deds"><glossterm>DEDS</glossterm> <acronym>DEDS</acronym>
	    <glossdef> <para>
		Discrete Event Dynamic System,  a discrete-state, event-driven system of which the state evolution depends entirely
		on the occurrence of asynchronous discrete events over time. Although similar to continuous-variable dynamic systems (CVDS),
			DEDS consists solely of discrete state spaces and event-driven state transition mechanisms.  Ref
		    <ulink url="https://en.wikipedia.org/wiki/Discrete_event_dynamic_system"/></para>
		<glossseealso otherterm="gls_des"/> </glossdef>
	</glossentry>

	<glossentry id="gls_des"><glossterm>DES</glossterm> <acronym>DES</acronym>
	    <glossdef> <para>
		Discrete-Event Simulation - model of the operation of a system as a discrete sequence of events in time.
		Each event occurs at a particular instant in time and marks a change of state in the system. Ref
		    <ulink url="https://en.wikipedia.org/wiki/Discrete-event_simulation"/></para> <glossseealso otherterm="gls_deds"/>
		<para>Also this abbreviation is designates Discrete Event System, the implementation of discrete-event simulation.</para>
	    </glossdef>
	</glossentry>

	<glossentry id="gls_fap2"><glossterm>FAP2</glossterm> <acronym>FAP2</acronym>
	    <glossdef> <para>
		Discrete Events System (DES) framework ver. 2 aka "grayb". Ref
		    <ulink url="../../../grayb/doc/design/index.html"/> </para></glossdef>
	</glossentry>

	<glossentry id="gls_irm"><glossterm>IRM</glossterm>
	    <glossdef> <para>Interface resolution mechanism.  <ulink url="../../../grayb/doc/design/index.htmds_ifcache"/>
	</para></glossdef> </glossentry>

    </glossary>

    <sect1 id="ds_itr"><title>Intro</title>
	<sect2 id="ds_itr_sp"><title>The scope of the project</title>
	    <simpara>
		This project is focusing on re-design of DES framework fap3, ref
		<ulink url="../../../fap3/doc/design/index.html"/>.
		    The main idea of the re-design is to use also DEDS (but lower-level, also called primary level) to create high-level DEDS, ref
		<ulink url="../../../fap3/doc/design/index.html#ds_ndes"/>
		    for the idea intro.
	    </simpara>
	    <simpara>When fap3 desing atomic elements are interfaces (C++), in ndeds such elements are connection points. Interfaces
		are also used but on ndeds lower level and are just simple interfaces (fap3 interfaces are not lightweight).
		Also <xref linkend="gls_irm"/> is not used.</simpara>
	</sect2>
	<sect2 id="ds_itr_dp"><title>Dependent projects</title>
	    <sect3 id="ds_itr_dp_fap3"><title>DES framework fap3, ref <ulink url="../../../fap3/doc/design/index.html"/></title>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_pn"><title>Primary net.</title>
	<sect2><title>Intro </title>
	    <simpara>
		Primary CP is the key part of primary DEDS. CPs is the backbone of DEDS. CPs create treeish topology with root CP exposing provided iface
		and the leafs representing required iface. This is the reason why this tree traversal effectiveness is so important, ref 
		<xref linkend="ds_pn_rsi"/> for details.
	    </simpara>
	</sect2>
	<sect2 id="ds_pn_rsi"><title>Resolving ifaces</title>
	    <simpara>
		The primary DEDS topology for upper-level DEDS (defined by DSL) seems has be tree-ish but not primitive. In DSL DEDS (ref fap3) the problem
		of getting the required ifaces from CP was solved by introducing
		<xref linkend="gls_irm"/>. This mechanism seems redundant for primary DEDS so we
		    can try to avoid using it and implement just effective ifaces pass algorithm instead.
	    </simpara>
	    <simpara>Ifaces pass algorithm is already used in <xref linkend="gls_irm"/>, ref fap3 IfrNode::nextLeaf(). Note that that  <xref linkend="gls_irm"/>
		mechanism in fact creates native treish net. To traversal thru the leafs of the trees native CP method nextLeaf() is used..
		The problem is that this traverlal mechanism is far from optimal, ref to IfrNode::nextLeaf() implementation. To have well performance on primary
		net we need to design effective leafs traversal mechanism.</simpara>
	</sect2>
	<sect2><title>Design: can homogeneous tree be used?</title>
	    <simpara>In fap3 the native CPs tree is heterogeneous - it combines separate types of CPs that nevetheless have same base.
		For instance tree node NTnnp (based on one-to-one CP NCpOnp) binded CP (one-to-many NCpOmnp) can connect to another NTnnp or one-to-many
		NCpOmnp. This works because NCpOmnp uses container of pointers to CPs base MNcpp.</simpara>
	    <simpara>The heterogeneous nature of the tree is caused by the fact that the whole tree is combined from the segments during the
		whole system creation.</simpara>
	    <simpara>This heterogeneous form creates some problems with designing effective leafs traversal.</simpara>
	    <simpara>Is it possible to have </simpara>
	</sect2>
	<sect2><title>Notification of net configuration changed.</title>
	    <sect3><title>Intro</title>
		<simpara>
		    Primary net re-configuration affects the system built above it. So the system needs to proper react on the re-configuration event.
		    In FAP3 native net doesn't support notification of its topology change. However in FAP3
		    <xref linkend="gls_irm"/> there is the means
			of notification, ref MIfReq::onProvInvalidated() and MIfProvOwner::onIfpDisconnected(), MIfProvOwner::onIfpInvalidated().
		</simpara>
		<simpara>What would be the mechanism of primary net update notification?</simpara>
	    </sect3>
	</sect2>
	<sect2><title>Primary net node identification</title>
	    <sect3><title>Intro</title>
		<simpara>The nodes in primary net needs to be identified. This is ultimately required for the purpose of debugging and troubleshooting.</simpara>
	    </sect3>
	</sect2>
    </sect1>



</article>

