<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Discrete Events Dynamics System (DEDS) native framework. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 23-Aug-2022</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for DEDS native framework.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>23-Aug-2022</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist>
	<title>References</title>

	<biblioentry id="ref_incr_mut"> <abbrev>INCR_MUT</abbrev>
	    <productname><ulink url="../../../fap-doc/doc_incr_syst_creation/index.html "/></productname>
	    <title>Y.Borisov. Using incremental mutation process for systems modeling</title> </biblioentry>
    </bibliolist>

    <glossary> <title>Glossary</title> 

	<glossentry id="gls_cp"><glossterm>CP</glossterm> <acronym>CP</acronym>
	    <glossdef> <para>Connection Point. Element that is used as endpoint of connections between systems. </para></glossdef>
	</glossentry>

	<glossentry id="gls_deds"><glossterm>DEDS</glossterm> <acronym>DEDS</acronym>
	    <glossdef> <para>
		Discrete Event Dynamic System,  a discrete-state, event-driven system of which the state evolution depends entirely
		on the occurrence of asynchronous discrete events over time. Although similar to continuous-variable dynamic systems (CVDS),
			DEDS consists solely of discrete state spaces and event-driven state transition mechanisms.  Ref
		    <ulink url="https://en.wikipedia.org/wiki/Discrete_event_dynamic_system"/></para>
		<glossseealso otherterm="gls_des"/> </glossdef>
	</glossentry>

	<glossentry id="gls_des"><glossterm>DES</glossterm> <acronym>DES</acronym>
	    <glossdef> <para>
		Discrete-Event Simulation - model of the operation of a system as a discrete sequence of events in time.
		Each event occurs at a particular instant in time and marks a change of state in the system. Ref
		    <ulink url="https://en.wikipedia.org/wiki/Discrete-event_simulation"/></para> <glossseealso otherterm="gls_deds"/>
		<para>Also this abbreviation is designates Discrete Event System, the implementation of discrete-event simulation.</para>
	    </glossdef>
	</glossentry>

	<glossentry id="gls_fap2"><glossterm>FAP2</glossterm> <acronym>FAP2</acronym>
	    <glossdef> <para>
		Discrete Events System (DES) framework ver. 2 aka "grayb". Ref
		    <ulink url="../../../grayb/doc/design/index.html"/> </para></glossdef>
	</glossentry>

	<glossentry id="gls_irm"><glossterm>IRM</glossterm>
	    <glossdef> <para>Interface resolution mechanism.  <ulink url="../../../grayb/doc/design/index.htmds_ifcache"/>
	</para></glossdef> </glossentry>

	<glossentry id="gls_dcs"><glossterm>DCS</glossterm> <acronym>DCS</acronym>
	    <glossdef> <para>
			DES Control of System, the mechanism of managing some subsystem by DES. 
		    <xref linkend="ds_dcs"/> for desing details </para></glossdef>
	</glossentry>

    </glossary>

    <sect1 id="ds_itr"><title>Intro</title>
	<sect2 id="ds_itr_sp"><title>The scope of the project</title>
	    <simpara>
		This project is focusing on re-design of DES framework fap3, ref
		<ulink url="../../../fap3/doc/design/index.html"/>.
		    The main idea of the re-design is to use also DEDS (but lower-level, also called primary level) to create high-level DEDS, ref
		<ulink url="../../../fap3/doc/design/index.html#ds_ndes"/>
		    for the idea intro.
	    </simpara>
	    <simpara>When fap3 desing atomic elements are interfaces (C++), in ndeds such elements are connection points. Interfaces
		are also used but on ndeds lower level and are just simple interfaces (fap3 interfaces are not lightweight).
		Also <xref linkend="gls_irm"/> is not used.</simpara>
	</sect2>
	<sect2 id="ds_itr_dp"><title>Dependent projects</title>
	    <sect3 id="ds_itr_dp_fap3"><title>DES framework fap3, ref <ulink url="../../../fap3/doc/design/index.html"/></title>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_pn"><title>Primary net.</title>
	<sect2><title>Intro </title>
	    <simpara>
		Primary CP is the key part of primary DEDS. CPs is the backbone of DEDS. CPs create treeish topology with root CP exposing provided iface
		and the leafs representing required iface. This is the reason why this tree traversal effectiveness is so important, ref 
		<xref linkend="ds_pn_rsi"/> for details.
	    </simpara>
	</sect2>
	<sect2 id="ds_pn_rsi"><title>Resolving ifaces</title>
	    <simpara>
		The primary DEDS topology for upper-level DEDS (defined by DSL) seems has be tree-ish but not primitive. In DSL DEDS (ref fap3) the problem
		of getting the required ifaces from CP was solved by introducing
		<xref linkend="gls_irm"/>. This mechanism seems redundant for primary DEDS so we
		    can try to avoid using it and implement just effective ifaces pass algorithm instead.
	    </simpara>
	    <simpara>Ifaces pass algorithm is already used in <xref linkend="gls_irm"/>, ref fap3 IfrNode::nextLeaf(). Note that that  <xref linkend="gls_irm"/>
		mechanism in fact creates native treish net. To traversal thru the leafs of the trees native CP method nextLeaf() is used..
		The problem is that this traverlal mechanism is far from optimal, ref to IfrNode::nextLeaf() implementation. To have well performance on primary
		net we need to design effective leafs traversal mechanism.</simpara>
	</sect2>
	<sect2><title>Design: can homogeneous tree be used?</title>
	    <simpara>In fap3 the native CPs tree is heterogeneous - it combines separate types of CPs that nevetheless have same base.
		For instance tree node NTnnp (based on one-to-one CP NCpOnp) binded CP (one-to-many NCpOmnp) can connect to another NTnnp or one-to-many
		NCpOmnp. This works because NCpOmnp uses container of pointers to CPs base MNcpp.</simpara>
	    <simpara>The heterogeneous nature of the tree is caused by the fact that the whole tree is combined from the segments during the
		whole system creation.</simpara>
	    <simpara>This heterogeneous form creates some problems with designing effective leafs traversal.</simpara>
	    <simpara>Is it possible to have </simpara>
	</sect2>
	<sect2><title>Notification of net configuration changed.</title>
	    <sect3><title>Intro</title>
		<simpara>
		    Primary net re-configuration affects the system built above it. So the system needs to proper react on the re-configuration event.
		    In FAP3 native net doesn't support notification of its topology change. However in FAP3
		    <xref linkend="gls_irm"/> there is the means
			of notification, ref MIfReq::onProvInvalidated() and MIfProvOwner::onIfpDisconnected(), MIfProvOwner::onIfpInvalidated().
		</simpara>
		<simpara>What would be the mechanism of primary net update notification?</simpara>
	    </sect3>
	</sect2>
	<sect2><title>Primary net node identification</title>
	    <sect3><title>Intro</title>
		<simpara>The nodes in primary net needs to be identified. This is ultimately required for the purpose of debugging and troubleshooting.</simpara>
	    </sect3>
	</sect2>
    </sect1>

    <sect1><title>Ownership relation</title>
	<sect2><title>Intro</title>
	    <simpara>Ownership is required at least for the resources correct deallocation. It doesn't matter in non-reconfigured systems - in that case we establish
		ownership on system construction. But for reconfigurable systems the ownership is needed - the elements (des, states, connpoints) are created dynamically so
		need to be binded with ownership relation.</simpara>
	</sect2>
	<sect2><title>Can FAP4 primary layer be non-reconfigurable?</title>
	    <sect3><title>Intro</title>
		<simpara>There is still a chance that FAP4 primary layer can be non-reconfigurable.
		    The idea is that native layer has to provide system re-configurability.</simpara>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_dcs"><title>DES Control of system (<xref linkend="gls_dcs"/></title>
	<sect2><title>Intro</title>
	    <simpara>Ref <ulink url="../../../fap3/doc/design/index.html#ds_dcs"/> for FAP3 corresponding design chapter.</simpara>
	</sect2>
	<sect2 id="ds_dcs_cl"><title>DES control layers</title>
	    <sect3 id="ds_dcs_cl_itr"><title>Intro</title>
		<simpara>It was earlier agreed that the complex system that includes DES controlling needs to be layered,
		    ref <ulink url="../../../fap3/doc/design/index.html#ds_dcs_sl"/> </simpara>
		<simpara>It was already discussed in scope of FAP3 (ref <ulink url="../../../fap3/doc/design/index.html#ds_dcs_sl"/>)
		    of how update-confirm schema has to be applied to the system that includes not just
		    simple data layer but the number of controlling layers. It was agreed that each layer needs to have "isolated" update/confirm
		    phases to avoid non-deterministic behavior. Note that current FAP3 solution doesn't follow this design, instead,
		    system structure change happens on confirm phase, ref  <ulink url="../../../fap3/doc/design/index.html#ds_dcs_ucs_cip"/>.
		</simpara>
		<simpara>It is still the question of how to design the layers. Currently in FAP3 the layers are not really isolated. They are
		    mixed instead: one DES owns both controlling and regular states/DES.</simpara>
	    </sect3>
	    <sect3 id="ds_dcs_cl_wilw"><title>Will isolated update/confirm really work for controlling?</title>
		<sect4><title>Intro</title>
		    <simpara>
			The doubt here is that update/confirm is well suitable for simple data, i.e. the data that
			can be renewed by simple copying (note that data confirmation is just copying updated data to the confirmed one.
			But for controlling it is not true: the data managed is complex, it cannot be simply copied to be actualized (confirmed).
			What update/confirm phases mean in that case? One solution is to represent the managed data via simple data, ref
			<xref linkend="ds_dcs_cl_wilw_rvsd"/>.
		    </simpara>
		</sect4>
		<sect4><title>Do we really need isolated update/confirm for controlling</title>
		    <simpara>There is no clear use-cases at the moment. Generic thought is that without isolation the system behaviour will be
			non-deterministic. Lets assume that there is the system and controlling state CS within it. The order of CS and other syncables of system
			is not deterministic: it is not guaranteed that for instance CS update will be performed first. Note that CS can change system syncables. So
			there will be different effects for the case "CS first" and "syncables first". </simpara>
		</sect4>
		<sect4 id="ds_dcs_cl_wilw_rvsd"><title>Solution. Managing single controlled data directly via API. Representing the managed data via simple data.</title>
		    <simpara>The idea is that we don't follow standard state desing having separate "updated" and "confirmed" data.
			Instead we have only single system structure data. The <emphasis>system structure data is controlled via native API</emphasis>
			(for instance the CP of DES observer/DES syncable is controlled via CP API).
			In the same time the dependencies of other controlling states on this system structure data can
			be represented simply by some parameters of the system structure data (for instance "pointer to added syncable).</simpara>
		    <simpara>Having isolated update/confirm stage is important here. Let's look at the example.
			The controlling state is adding some state to controlled DES. Controlling state creates new state and directly modifies controlled DES
			observer/syncable CP by adding new state to CP's pairs. But this will cause new state immediatelly reporting "on activated"
			event from newly connected syncable to DES. With isolated update/confirm the DES will add syncable to the "lower level" list of
			"active" syncables and will not update new syncable immediatelly. Otherwise (if we were avoid using isolated update/confirm) the DES
			would perform the update of new syncable immediately - this means that the controlling action will interfere with date update.</simpara>
		    <simpara>How do we avoid interfering controlling states updates? Just via representing the managed system structure date via simple parameters
			(i.e. pure data) that is confirmed on confirmation phase. So other controling data will get activated on confirmation phase only.</simpara>
		</sect4>
		<sect4><title>Solution. Dealing with system structure data as with regular data.</title>
		    <simpara>There is still the possibility of changing of system structure data as regular data. Let's consider the case discussed
			in <xref linkend="ds_dcs_cl_wilw_rvsd"/> - changing of DES "observer/syncable" CP. What we need to do in this case is to
		    adapt syncable connections to double buffering scheme. TBD. </simpara>
		</sect4>
	    </sect3>
	    <sect3 id="ds_dcs_cl_wilw_idb"><title>Using inputs double buffering instead of data double buffering.</title>
		<simpara>As it was mentioned in <xref linkend="ds_dcs_cl_itr"/> in fap3 the controlling is performed on confirmation phase.
		    Actually it is input double buffering design, where on update phase the inputs are buffered (because they can be changed on confirm phase),
		    but on confirm phase the data is actually updated.</simpara>
		<simpara>This is the solution alternative to base solution where the data update is performed on update phase, for instance the 
		    solution <xref linkend="ds_dcs_cl_wilw_rvsd"/></simpara>
		<simpara>Pros of this solution is that system structure complicated data double buffering is not always necessary - input data is
		    often simple data so it doesn't cause any problems to double buffer them.</simpara>
		<simpara>Cons of the solution is a bit overhead in inputs double buffering - there can be duplication of buffers in case if
		    same state output connects to the number of inputs.</simpara>
	    </sect3>
	    <sect3 id="ds_dcs_cl_ddc"><title>Option#1. Dedicated state/DES for controlling </title>
		<sect4><title>Intro</title>
		    <simpara>One design option of "isolating" controlling </simpara>
		</sect4>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_i"><title>Issues</title>
	<sect2 id="ds_i_01"><title>[I_01] Active list is not updated when active syncable has been deleted.</title>
	    <sect3><title>Description</title>
		<simpara>There is some DES and syncable X. Syncable X gets active, it notifies DES (as oblerver) - DES adds X to the list of active syncable.
		    Some controlling causes syncable X deletion - X doensn't notify DES of deletion (because there is not such DES observer APIs) - next update phase
		    DES calls X update - exception occurs.</simpara>
	    </sect3>
	</sect2>
    </sect1>



</article>

